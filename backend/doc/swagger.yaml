openapi: 3.0.0
info:
  title: Address Book API
  description: |-
    Address Book API documentation based on the OpenAPI 3.0 specification.
    Consider CORS restrictions when making requests to other hosts.
  version: 1.0.0
servers:
  - url: http://localhost:3000/api/v1
    description: Local development server
  - url: http://localhost/api/v1
    description: Local test server
  - url: https://example.com/api/v1
    description: Production server
  - url: https://staging.example.com/api/v1
    description: Staging server
tags:
  - name: contacts
    description: Operations about contacts of user
  - name: help
    description: Get help informaton to discover API
paths:
  /:
    get:
      tags:
        - help
      summary: Get help information
      description: Get help information to discover API
      operationId: getHelp
      responses:
        '200':
          description: Returns help result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelpRespModel'
  /contacts:
    get:
      tags:
        - contacts
      summary: Get contacts of user
      description: Get contacts of user with given query parameters
      operationId: getContacts
      parameters:
        - $ref: '#/components/parameters/name'
        - $ref: '#/components/parameters/address'
        - $ref: '#/components/parameters/phone'
        - $ref: '#/components/parameters/mobilePhone'
        - $ref: '#/components/parameters/email'
      responses:
        '200':
          description: Returns contacts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContactsRespModel'
        '500':
          $ref: '#/components/responses/HTTPStatus500'
        '503':
          $ref: '#/components/responses/HTTPStatus500'
    post:
      tags:
        - contacts
      summary: Add a new contact
      description: Add a new contact by giving contact informations
      operationId: addNewContact
      requestBody:
        description: Body data that includes contact informations
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContactReqModel'
        required: true
      responses:
        '201':
          description: Contact created successfully, returns the contact Id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContactId'
        '400':
          description: Invalid contact fields, returns invalid fields
          content:
            application/json:
              schema:
                anyOf: # One or more
                  - $ref: '#/components/schemas/ContactNameExists'
                  - $ref: '#/components/schemas/InvalidContactName'
                  - $ref: '#/components/schemas/InvalidContactAddress'
                  - $ref: '#/components/schemas/InvalidContactPhone'
                  - $ref: '#/components/schemas/InvalidContactMobilePhone'
                  - $ref: '#/components/schemas/InvalidContactEmail'
        '500':
          $ref: '#/components/responses/HTTPStatus500'
        '503':
          $ref: '#/components/responses/HTTPStatus500'
  /contacts/{contactId}:
    parameters:
    - $ref: '#/components/parameters/contactId'
    get:
      tags:
        - contacts
      summary: Get a contact of user
      description: Get a contact of user by contact Id
      operationId: getContact
      responses:
        '200':
          description: Returns a contact response model data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContactRespModel'
        '400':
          description: Contact Id invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidContactId'
        '404':
          description: Contact not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContactNotFound'
        '500':
          $ref: '#/components/responses/HTTPStatus500'
        '503':
          $ref: '#/components/responses/HTTPStatus503'
    delete:
      tags:
        - contacts
      summary: Delete a contact of user
      description: Delete a contact of user by contact Id
      operationId: deleteContact
      responses:
        '204':
          description: Contact deleted successfully
        '400':
          description: Contact Id invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidContactId'
        '404':
          description: Contact not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContactNotFound'
        '500':
          $ref: '#/components/responses/HTTPStatus500'
        '503':
          $ref: '#/components/responses/HTTPStatus503'
    put:
      tags:
        - contacts
      summary: Update a contact of user
      description: Update a contact of user by contact Id
      operationId: updateContact
      requestBody:
        description: Body data that includes contact informations
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContactReqModel'
        required: true
      responses:
        '204':
          description: Contact updated successfully
        '400':
          description: Invalid contact fields, returns invalid fields
          content:
            application/json:
              schema:
                anyOf: # One or more
                  - $ref: '#/components/schemas/ContactNameExists'
                  - $ref: '#/components/schemas/InvalidContactName'
                  - $ref: '#/components/schemas/InvalidContactAddress'
                  - $ref: '#/components/schemas/InvalidContactPhone'
                  - $ref: '#/components/schemas/InvalidContactMobilePhone'
                  - $ref: '#/components/schemas/InvalidContactEmail'
        '404':
          description: Contact not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContactNotFound'
        '500':
          $ref: '#/components/responses/HTTPStatus500'
        '503':
          $ref: '#/components/responses/HTTPStatus503'
components:
  schemas:
    Error:
      description: Error response data model
      type: object
      properties:
        code:
          type: integer
        message:
          type: string
      example:
        code: 503
        message: Database unavailable
      required:
        - code
        - message
    ContactId:
      description: Id data model of contact
      type: string
      format: uuid
      example: abc12345-122a-2211-bc12-123123abcef3
    Name:
      description: |-
        Full name data of contact
        Length must be between 1 and 50
        Must be unique for each contact
      type: string
      minLength: 1
      maxLength: 50
      example: Brian Kernighan
    Phone:
      description: |-
        Phone data of contact
        Length must be between 1 and 15 digits according to E.164
      type: string
      minLength: 1
      maxLength: 15
      example: '+15551114443'
    Email:
      description: Email data of contact
      type: string
      format: email
      example: example@example.com
    Address:
      description: Address data of contact
      type: string
      minLength: 1
      maxLength: 255
      example: Ankara, Turkey
    Contact:
      description: |-
        Contact data model that contains contact information
        Name, address, and phone fields are required
        Name must be unique for each contact
      type: object
      properties:
        name:
          $ref: '#/components/schemas/Name'
        address:
          $ref: '#/components/schemas/Address'
        phone:
          $ref: '#/components/schemas/Phone'
        email:
          $ref: '#/components/schemas/Email'
        mobilePhone:
          $ref: '#/components/schemas/Phone'
      example:
        name: Tim Cook
        address: Los Angeles, CA
        phone: '+385957507783'
        email: tcook@apple.com
        mobilePhone: '+14089740100'
      required:
        - name
        - address
        - phone
    ContactRespModel:
      description: Contact response data model that contains contact information and contact Id
      allOf:
        - type: object
          properties:
            id:
              type: string
              format: uuid
          example:
            id: e2527518-033c-49e2-a630-5f4a9af16ebc
          required:
            - id
        - $ref: '#/components/schemas/Contact'
    ContactReqModel:
      description: Contact request data model that contains contact information
      allOf:
        - $ref: '#/components/schemas/Contact'
        # - type: object -> Add extra properties here
    ContactsRespModel:
      description: Contacts response that the user has
      type: array
      items:
        $ref: '#/components/schemas/ContactRespModel'
    ContactNotFound:
      description: Contact not found
      allOf:
      - $ref: '#/components/schemas/Error'
      example:
        code: 404
        message: Contact not found
    InvalidContactId:
      description: Invalid contact Id
      allOf:
      - $ref: '#/components/schemas/Error'
      example:
        code: 400
        message: Invalid contact Id
    InvalidContactName:
      description: Invalid contact name
      allOf:
      - $ref: '#/components/schemas/Error'
      example:
        code: 400
        message: Invalid contact name
    ContactNameExists:
      description: Contact name exists
      allOf:
      - $ref: '#/components/schemas/Error'
      example:
        code: 400
        message: Contact name exists
    InvalidContactEmail:
      description: Invalid contact email
      allOf:
      - $ref: '#/components/schemas/Error'
      example:
        code: 400
        message: Invalid contact name
    InvalidContactAddress:
      description: Invalid contact address
      allOf:
      - $ref: '#/components/schemas/Error'
      example:
        code: 400
        message: Invalid contact address
    InvalidContactPhone:
      description: Invalid contact phone
      allOf:
      - $ref: '#/components/schemas/Error'
      example:
        code: 400
        message: Invalid contact phone
    InvalidContactMobilePhone:
      description: Invalid contact mobile phone
      allOf:
      - $ref: '#/components/schemas/Error'
      example:
        code: 400
        message: Invalid contact mobile phone
    HelpRespModel:
      description: Help response data model
      type: object
      additionalProperties:
        type: string
      example:
        /metrics: get metrics data
        doc/: get api doc
  responses:
    HTTPStatus500:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 500
            message: Internal server error

    HTTPStatus503:
      description: Database unavailable
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            dbUnavailable:
              value:
                code: 503
                message: Database unavailable
  parameters:
    contactId:
      description: Contact Id as path parameter
      required: true
      in: path
      name: contactId
      schema:
        $ref: '#/components/schemas/ContactId'
    name:
      description: Name as query parameter
      in: query
      name: name
      schema:
        $ref: '#/components/schemas/Name'
    address:
      description: Address as query parameter
      in: query
      name: address
      schema:
        $ref: '#/components/schemas/Address'
    phone:
      description: Phone as query parameter
      in: query
      name: phone
      schema:
        $ref: '#/components/schemas/Phone'
    mobilePhone:
      description: Mobile phone as query parameter
      in: query
      name: mobilePhone
      schema:
        $ref: '#/components/schemas/Phone'
    email:
      description: Email as query parameter
      in: query
      name: email
      schema:
        $ref: '#/components/schemas/Email'
